{"version":3,"sources":["components/AddTodo.js","store/actionTypes.js","App.js","serviceWorker.js","store/reducer.js","index.js"],"names":["connect","state","todos","dispatch","onAddHandler","item","date","type","payload","todo","completed","status","onUpdateHandler","onDeleteTodo","onChangeStatus","id","props","useState","setTodo","anchorEl","setAnchorEl","dialogOpen","setDialogOpen","toUpdate","setToUpdate","filter","setFilter","Date","setDate","length","map","console","log","className","Input","onChange","e","value","target","name","style","marginRight","placeholder","autoFocus","utils","DateFnsUtils","margin","format","KeyboardButtonProps","Button","variant","color","onClick","preventDefault","test","toast","error","position","info","Select","MenuItem","List","aria-label","ListItem","key","Tooltip","title","fontSize","lineHeight","fontWeight","fontFamily","borderRadius","arrow","Checkbox","checked","ListItemText","primary","getDate","getMonth","getFullYear","IconButton","currentTarget","Menu","open","Boolean","onClose","Dialog","onBackdropClick","DialogTitle","DialogContent","App","window","location","hostname","match","initialState","reducerFunc","action","concat","Math","random","updateArr","updateDel","updateT","store","createStore","reducer","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.27142a2a.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { connect } from 'react-redux'\r\nimport { Input, Button, List, ListItem, ListItemText, IconButton, Dialog, DialogContent, DialogTitle, Select, MenuItem, Tooltip, Checkbox, Menu } from '@material-ui/core'\r\nimport * as actionTypes from '../store/actionTypes'\r\nimport './AddTodo.css'\r\nimport Delete from '@material-ui/icons/Delete'\r\nimport Edit from '@material-ui/icons/Edit'\r\nimport MoreVert from '@material-ui/icons/MoreVert'\r\nimport 'date-fns'\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from '@material-ui/pickers';\r\nimport { toast, ToastContainer } from 'react-toastify'\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\n\r\nconst AddTodo = (props) => {\r\n    const [todo, setTodo] = useState({\r\n        status: 'Select Status'\r\n    })\r\n    const [anchorEl, setAnchorEl] = useState(null)\r\n    const [dialogOpen, setDialogOpen] = useState(false)\r\n    const [toUpdate, setToUpdate] = useState({\r\n        id: '', todo: ''\r\n    })\r\n    const [filter, setFilter] = useState('All')\r\n    const [date, setDate] = useState(new Date())\r\n\r\n    const changeHandler = (e) => {\r\n        let value = e.target.value\r\n        setTodo({\r\n            ...todo,\r\n            [e.target.name]: value\r\n        })\r\n    }\r\n\r\n    const updateChangeHandler = (e) => {\r\n        let value = e.target.value\r\n        setToUpdate({\r\n            ...toUpdate,\r\n            [e.target.name]: value,\r\n        })\r\n    }\r\n\r\n    const addTodoHandler = (e) => {\r\n        e.preventDefault()\r\n        if(!todo.todo || todo.todo.length === 0) {\r\n            toast.info('Todo name cannot be empty. Please fill todo name', {\r\n                position: 'top-center'\r\n            })\r\n        }\r\n        else if(/^[a-zA-Z\\s]*$/.test(todo.todo)) {\r\n            props.onAddHandler(todo, date)\r\n            setTodo({\r\n                ...todo,\r\n                todo: '',\r\n                status: 'Select Status'\r\n            })\r\n            setDate(new Date())\r\n        }\r\n        else {\r\n            toast.error('Only letters will be accepted in todo name, please enter only letters', {\r\n                position: 'top-center'\r\n            })\r\n        }\r\n    }\r\n\r\n    const updateTodoHandler = (e) => {\r\n        e.preventDefault()\r\n        if(!toUpdate.todo || toUpdate.todo.length === 0) {\r\n            toast.info('Todo name cannot be empty. Please fill todo name', {\r\n                position: 'top-center'\r\n            })\r\n        }\r\n        else if (/^[a-zA-Z\\s]+$/.test(toUpdate.todo)) {\r\n            props.onUpdateHandler(toUpdate)\r\n            setDialogOpen(!dialogOpen)\r\n        }\r\n        else {\r\n            toast.error('Only letters will be accepted in todo name, please enter only letters', {\r\n                position: 'top-center'\r\n            })\r\n        }\r\n    }\r\n\r\n    const filterChangeHandler = (e) => {\r\n        setFilter(e.target.value)\r\n    }\r\n    \r\n    const handleDateChange = (e) => {\r\n        setDate(e)\r\n    }\r\n\r\n    if(props.todos.length > 0) {\r\n        props.todos.map(todo => {\r\n            console.log(todo.date);\r\n        })\r\n    }\r\n    else {}\r\n\r\n    return (\r\n        <div className=\"todo-main\">\r\n            <form>\r\n                <div className=\"w-100 d-flex\">\r\n                    <Input onChange={changeHandler} style={{ marginRight: 7 }} name=\"todo\" value={todo && todo.todo} className=\"w-60\" placeholder=\"Enter your todo\" autoFocus />\r\n                    <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                        <KeyboardDatePicker\r\n                            margin=\"normal\"\r\n                            id=\"date-picker-dialog\"\r\n                            className=\"date\"\r\n                            style={{ marginRight: 7 }}\r\n                            format=\"dd/MM/yyyy\"\r\n                            value={date}\r\n                            onChange={handleDateChange}\r\n                            \r\n                            KeyboardButtonProps={{\r\n                            'aria-label': 'change date',\r\n                            }}\r\n                        />\r\n                    </MuiPickersUtilsProvider>\r\n                    <Button \r\n                        type=\"submit\"\r\n                        variant=\"contained\"  \r\n                        color=\"primary\" \r\n                        onClick={addTodoHandler}>Save</Button>\r\n                </div>\r\n            </form>\r\n\r\n            { \r\n                props.todos.length > 0 && \r\n                <div className=\"w-100\">\r\n                    <div className=\"w-100 d-flex mt-20\">\r\n                        <div>\r\n                            <span>Filter by status</span>\r\n                        </div>\r\n                        <Select value={filter} onChange={filterChangeHandler} name=\"filter\">\r\n                            <MenuItem value=\"All\">All</MenuItem>\r\n                            <MenuItem value=\"Active\">Active</MenuItem>\r\n                            <MenuItem value=\"Completed\">Completed</MenuItem>\r\n                        </Select>\r\n                    </div>\r\n                </div>\r\n            }\r\n\r\n            {\r\n                (props.todos && props.todos.length > 0 && filter === 'All') && <List aria-label=\"secondary\" className=\"mt-20\">\r\n                    {\r\n                        props.todos.map(todo => (\r\n                            <ListItem className={`todo-list_item mb-10 ${todo.completed ? 'todo-list_item-done' : 'todo-list_item-progress'}`} key={todo.id}>\r\n                                <Tooltip title={<h6 style={{ fontSize: 14, lineHeight: 1, margin: '3px 0' , fontWeight: 300, fontFamily: 'Poppins', borderRadius: 0 }}>{todo.completed ? 'Mark as Active' : 'Mark as Completed'}</h6>} arrow>\r\n                                    <Checkbox checked={todo.completed} onChange={() => props.onChangeStatus(!todo.completed, todo)} />\r\n                                </Tooltip>\r\n                                \r\n                                <ListItemText primary={todo.value} className='text-todo f-14' />\r\n                                <ListItemText primary={todo.status} className=\"status-todo f-14\" /> \r\n                                <ListItemText primary={`${todo.date.getDate()}/${todo.date.getMonth()}/${todo.date.getFullYear()}`} className=\"status-todo f-14\" /> \r\n                                <div className=\"hide-md d-flex\">\r\n                                    <Tooltip title={<h6 style={{ fontSize: 14, lineHeight: 1, margin: '3px 0' , fontWeight: 300, fontFamily: 'Poppins' }}>Edit</h6>} arrow>\r\n                                        <IconButton color=\"inherit\" style={{ marginRight: 7 }} onClick={() => {setToUpdate({ id: todo.id, todo: todo.value, status: todo.status }); setDialogOpen(true)}}>\r\n                                            <Edit />\r\n                                        </IconButton>\r\n                                    </Tooltip>\r\n                                    <Tooltip title={<h6 style={{ fontSize: 14, lineHeight: 1, margin: '3px 0' , fontWeight: 300, fontFamily: 'Poppins' }}>Delete</h6>} arrow>\r\n                                        <IconButton color=\"secondary\" onClick={() => props.onDeleteTodo(todo)}>\r\n                                            <Delete />\r\n                                        </IconButton>\r\n                                    </Tooltip>\r\n                                </div>\r\n                                <div className=\"show-md\">\r\n                                    <Tooltip title={<h6 style={{ fontSize: 14, lineHeight: 1, margin: '3px 0' , fontWeight: 300, fontFamily: 'Poppins' }}>Actions</h6>} arrow>\r\n                                        <IconButton color=\"inherit\">\r\n                                            <MoreVert onClick={(e) => setAnchorEl(e.currentTarget)} />\r\n                                        </IconButton>\r\n                                    </Tooltip>\r\n                                    <Menu anchorEl={anchorEl} open={Boolean(anchorEl)} onClose={() => setAnchorEl(null)}>\r\n                                        <MenuItem onClick={() => {setToUpdate({ id: todo.id, todo: todo.value, status: todo.status }); setDialogOpen(true); setAnchorEl(null)}}>Edit</MenuItem>\r\n                                        <MenuItem onClick={() => {props.onDeleteTodo(todo); setAnchorEl(null)}} >Delete</MenuItem>\r\n                                    </Menu>\r\n                                </div>\r\n                            </ListItem>\r\n                        ))\r\n                    }\r\n                </List>\r\n            }\r\n\r\n            {\r\n                (props.todos !== null && filter !== 'All') && <List aria-label=\"secondary\" className=\"mt-20\">\r\n                    {\r\n                        props.todos.filter(todo => todo.status === filter).map(todo => (\r\n                            <ListItem className={`todo-list_item mb-10 ${todo.completed ? 'todo-list_item-done' : 'todo-list_item-progress'}`} key={todo.id}>\r\n                                <Tooltip title={<h6 style={{ fontSize: 14, lineHeight: 1, margin: '3px 0' , fontWeight: 300, fontFamily: 'Poppins', borderRadius: 0 }}>{todo.completed ? 'Mark as Active' : 'Mark as Completed'}</h6>} arrow>\r\n                                    <Checkbox checked={todo.completed} onChange={() => props.onChangeStatus(!todo.completed, todo)} />\r\n                                </Tooltip>\r\n                                \r\n                                <ListItemText primary={todo.value} className='text-todo f-14' />\r\n                                <ListItemText primary={todo.status} className=\"status-todo f-14\" /> \r\n                                <ListItemText primary={`${todo.date.getDate()}/${todo.date.getMonth()}/${todo.date.getFullYear()}`} className=\"status-todo f-14\" /> \r\n                                <Tooltip title={<h6 style={{ fontSize: 14, lineHeight: 1, margin: '3px 0' , fontWeight: 300, fontFamily: 'Poppins' }}>Edit</h6>} arrow>\r\n                                    <IconButton color=\"inherit\" style={{ marginRight: 7 }} onClick={() => {setToUpdate({ id: todo.id, todo: todo.value, status: todo.status }); setDialogOpen(true)}}>\r\n                                        <Edit />\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n                                <Tooltip title={<h6 style={{ fontSize: 14, lineHeight: 1, margin: '3px 0' , fontWeight: 300, fontFamily: 'Poppins' }}>Delete</h6>} arrow>\r\n                                    <IconButton color=\"secondary\" onClick={() => props.onDeleteTodo(todo)}>\r\n                                        <Delete />\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n                            </ListItem>\r\n                        ))\r\n                    }\r\n                </List>\r\n            }\r\n\r\n            <Dialog open={dialogOpen} onBackdropClick={() => setDialogOpen(!dialogOpen)}>\r\n                <DialogTitle>Update Todo</DialogTitle>\r\n                <DialogContent>\r\n                    <form>\r\n                        <div className=\"w-100 d-flex\">\r\n                            <Input onChange={updateChangeHandler} name=\"todo\" value={toUpdate.todo} className=\"w-80 mr-15\" placeholder=\"Enter your todo\" autoFocus />\r\n                            <Button \r\n                                type=\"submit\"\r\n                                variant=\"contained\"  \r\n                                color=\"primary\" \r\n                                onClick={updateTodoHandler}>Update</Button>\r\n                        </div>\r\n                    </form>\r\n                </DialogContent>\r\n            </Dialog>\r\n            <ToastContainer />\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        todos: state.todos\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return  {\r\n        onAddHandler: (item, date) => {\r\n            dispatch({ type: actionTypes.ADD_TODO, payload: item.todo, completed: false, date: date, status: 'Active' })\r\n        },\r\n        onUpdateHandler: (item) => {\r\n            dispatch({ type: actionTypes.UPDATE_TODO, payload: item })\r\n        },\r\n        onDeleteTodo: (item) => {\r\n            dispatch({ type: actionTypes.DELETE_TODO, payload: item })\r\n        },\r\n        onChangeStatus: (status, todo) => {\r\n            if(todo.status === 'Active') {\r\n                dispatch({ type: actionTypes.CHANGE_STATUS, payload: status, id: todo.id, status: 'Completed' })\r\n            }\r\n            else {\r\n                dispatch({ type: actionTypes.CHANGE_STATUS, payload: status, id: todo.id, status: 'Active' })\r\n            }\r\n            \r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddTodo);\r\n","export const ADD_TODO = 'ADD_TODO';\r\nexport const UPDATE_TODO = 'UPDATE_TODO';\r\nexport const DELETE_TODO = 'DELETE_TODO';\r\nexport const CHANGE_STATUS = 'CHANGE_STATUS';","import React, { Fragment } from 'react';\nimport './App.css';\nimport AddTodo from './components/AddTodo';\n\nfunction App() {\n  return (\n    <Fragment>\n      <h1 className=\"todo-head\">Todo App</h1>\n      <AddTodo />\n    </Fragment>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as actionTypes from './actionTypes'\r\n\r\nconst initialState = {\r\n    todos: []\r\n}\r\n\r\nconst reducerFunc = (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case actionTypes.ADD_TODO:\r\n            return {\r\n                ...state,\r\n                todos: state.todos.concat({id: Math.random(),value: action.payload, completed: action.completed, date: action.date, status: action.status})\r\n            }\r\n\r\n        case actionTypes.UPDATE_TODO:\r\n            const updateArr = state.todos.map(todo => \r\n                todo.id === action.payload.id ? { ...todo, value: action.payload.todo, status: action.payload.status } : todo\r\n            )\r\n            \r\n            return {\r\n                ...state,\r\n                todos: updateArr\r\n            }\r\n\r\n        case actionTypes.DELETE_TODO:\r\n            const updateDel = state.todos.filter(todo => todo.id !== action.payload.id)\r\n            return {\r\n                ...state,\r\n                todos: updateDel\r\n            }\r\n\r\n        case actionTypes.CHANGE_STATUS:\r\n            const updateT = state.todos.map(todo=> \r\n                todo.id === action.id ? { ...todo, completed: action.payload, status: action.status } : todo)\r\n            return {\r\n                ...state,\r\n                todos: updateT\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n    return state\r\n}\r\n\r\nexport default reducerFunc","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux'\nimport { Provider } from 'react-redux'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport reducer from './store/reducer'\n\nconst store = createStore(reducer)\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}